I want to build a full-stack web application for a collaborative study group platform, with the following core features and requirements. The app should be responsive for both browser and mobile use (PWA-ready if possible), and built using modern tools available on Replit.

---

üõ†Ô∏è TECH STACK:

- Frontend: React + Tailwind CSS
- Backend: Node.js + Express
- Database: Firebase Firestore or Supabase
- Authentication: Firebase Auth or Supabase Auth
- Real-time features (for collaborative flashcards): Firebase Realtime DB or Socket.io
- AI integration (later): Placeholder endpoints for GPT-style test generation
- Deployment: Fully functional in Replit environment

---

üéØ CORE FEATURES FOR VERSION 1:

1. **User Authentication**
   - Sign up/login with email/password
   - Store user data: name, avatar, availability, preferred study style

2. **Study Group Creation**
   - Any user can create a study group
   - Creator becomes the Group Lead (admin privileges)
   - Group settings:
     - Name, description
     - One or more assigned courses
     - Public or Private group toggle

3. **Join Requests**
   - Users can request to join public study groups
   - Group Leads can Accept or Decline
   - Optional setting: Democratized approval (members vote)

4. **Course Room**
   - Each study group has one or more "Course Rooms"
   - Each room contains:
     - Flashcard decks
     - Group calendar for auto-generated sessions
     - Tests & results
     - Chat area or post board

5. **Collaborative Flashcards**
   - Users can create and edit flashcard decks
   - Real-time collaboration (basic implementation for now)
   - Flashcards include question/answer fields, tags, and categories

6. **Test Generation Settings**
   - Group Lead sets test frequency (weekly, monthly, etc.)
   - Test format options: Multiple-choice, short-answer, essay (NO fill-in-the-gap questions)
   - When test day arrives, notify all group members

7. **Leaderboard**
   - Shows rankings based on:
     - Quiz/test scores
     - Consistency (attendance in study sessions)
     - Flashcard contributions
   - Multiple leaderboard types to prevent discouragement
   - Resets based on weekly/monthly interval set by Group Lead

8. **Notification Settings**
   - Users can customize what types of notifications they receive:
     - Test reminders
     - New content added
     - Session start times
   - Option to get email or in-app notifications only

---

üì¶ STRUCTURE & FILE ORGANIZATION SUGGESTION:

- `/client`
  - React app
  - Tailwind setup
  - Components: GroupCard, FlashcardDeck, Leaderboard, etc.
  - Pages: Login, Dashboard, GroupPage, CourseRoomPage

- `/server`
  - Node.js + Express
  - API routes: `/groups`, `/users`, `/tests`, `/flashcards`
  - Integration with Firebase or Supabase
  - Middleware for auth checks

- `/shared`
  - Utility functions
  - Constants (test types, leaderboard categories)
  - Placeholder AI logic

---

üöÄ OPTIONAL (Placeholders only for now):

- AI endpoint: `/api/generate-test`
   - Accepts topic + course materials
   - Returns multiple-choice and short-answer questions only
   - No fill-in-the-blank
   - Simulate using mock data for now

---

üß™ STARTING INSTRUCTIONS:

- Scaffold the frontend and backend in Replit
- Set up user auth + basic group creation flow
- Implement flashcard creation in a course room
- Add basic test scheduling config (frequency, type)
- Show test schedule on group dashboard
- Store test results + generate basic leaderboard

---

End goal for this version: A user can sign in, create/join a study group, set up flashcards, configure test plans, and see a leaderboard ‚Äî all within a clean, responsive UI using React.

